@page "/todos/new"
@page "/todos/{id:int}"
@attribute [Authorize]
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using TodoApp
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject ITodosClient TodosClient
@inject IDialogService DialogService
@inject Services.IAccessTokenProvider AccessTokenProvider

@if (notFound)
{
    <PageTitle>Not found</PageTitle>

    <MudText Typo="Typo.h4" GutterBottom="true">Not found</MudText>
}
else if (error)
{
    <PageTitle>Error</PageTitle>

    <MudText Typo="Typo.h4" GutterBottom="true">Error</MudText>
}
else
{
    @if (todo is not null)
    {
        <PageTitle>@todo.Id @todo.Title</PageTitle>

        @if (Id != null)
        {
            <MudText Typo="Typo.h4" Class="mb-4">@Id - @Title</MudText>
        }

        <MudPaper Elevation="25" Class="pa-4">

            <EditForm EditContext="editContext" OnValidSubmit="Submit">
                <DataAnnotationsValidator />

                <MudTextField Label="Title" Variant="Variant.Outlined" @bind-Value="Title" For="() => Title"
                              Class="mb-4" />

                <MudTextField Label="Description" Lines="5" Variant="Variant.Outlined" @bind-Value="Description"
                              For="() => Description" Class="mb-4" />

                <MudSelect Label="Status" @bind-Value="Status" For="() => Status" Variant="Variant.Outlined" Class="mb-4">
                    @foreach (var status in Enum.GetValues<TodoStatusDto>())
                    {
                        <MudSelectItem Value="@status">@Enum.GetName(typeof(TodoStatusDto), status)</MudSelectItem>
                    }
                </MudSelect>

                <MudNumericField Label="Estimated hours" Variant="Variant.Outlined" @bind-Value="EstimatedHours"
                                 For="() => EstimatedHours" Class="mb-4" />

                <MudNumericField Label="Remaining hours" Variant="Variant.Outlined" @bind-Value="RemainingHours"
                                 For="() => RemainingHours" Class="mb-4" />

                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Submit">Update</MudButton>

            </EditForm>
        </MudPaper>
    }
}


@code {
    EditContext editContext = null!;
    TodoDto? todo;
    HubConnection hubConnection = null!;
    bool notFound = false;
    bool error = false;

    [Parameter] public int? Id { get; set; }

    [MaxLength(60)]
    public string Title { get; set; } = null!;

    [MaxLength(340)]
    public string? Description { get; set; }

    public TodoStatusDto Status { get; set; }

    public double? EstimatedHours { get; set; }

    public double? RemainingHours { get; set; }

    async Task Submit()
    {
        try
        {
            await TodosClient.UpdateTitleAsync(Id.GetValueOrDefault(), Title);

            await TodosClient.UpdateDescriptionAsync(Id.GetValueOrDefault(), Description);

            await TodosClient.UpdateStatusAsync(Id.GetValueOrDefault(), Status);

            await TodosClient.UpdateEstimatedHoursAsync(Id.GetValueOrDefault(), EstimatedHours);

            await TodosClient.UpdateRemainingHoursAsync(Id.GetValueOrDefault(), RemainingHours);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(this);

        notFound = false;
        error = false;

        if (Id is null)
        {
            await CreateTodo();
        }
        else
        {
            try
            {
                await LoadTodo(Id.GetValueOrDefault());
            }
            catch (ApiException<ProblemDetails> exc)
            {
                if (exc.StatusCode == (int)System.Net.HttpStatusCode.NotFound)
                {
                    notFound = true;
                }
                else
                {
                    error = true;
                }
            }
            catch (Exception)
            {
                error = true;
            }
        }

        try
        {
            hubConnection = new HubConnectionBuilder()
            .WithUrl($"https://localhost:5001/hubs/todos?itemId={Id}", options =>
            {
                options.AccessTokenProvider = async () => await AccessTokenProvider.GetAccessTokenAsync();
            })
            .WithAutomaticReconnect().Build();

            hubConnection.On<int, string>("TitleUpdated", OnTitleUpdated);
            hubConnection.On<int, string?>("DescriptionUpdated", OnDescriptionUpdated);
            hubConnection.On<int, TodoStatusDto>("StatusUpdated", OnStatusUpdated);
            hubConnection.On<int, double?>("EstimatedHoursUpdated", OnEstimatedHoursUpdated);
            hubConnection.On<int, double?>("RemainingHoursUpdated", OnRemainingHoursUpdated);

            hubConnection.Closed += (error) =>
            {
                if (error is not null)
                {
                    Snackbar.Add($"{error.Message}", Severity.Error);
                }

                return Task.CompletedTask;
            };
            hubConnection.Reconnected += (error) =>
            {
                Snackbar.Add("Reconnected");
                return Task.CompletedTask;
            };
            hubConnection.Reconnecting += (error) =>
            {
                Snackbar.Add("Reconnecting");
                return Task.CompletedTask;
            };
            await hubConnection.StartAsync();
        }
        catch (Exception exc)
        {
            Snackbar.Add(exc.Message.ToString(), Severity.Error);
        }
    }

    async Task CreateTodo()
    {
        todo = await TodosClient.CreateTodoAsync(new CreateTodoRequest
        {
            Title = "Test",
            Description = "Lorem ipsum",
            Status = TodoStatusDto.NotStarted
        });

        Title = todo.Title;
        Description = todo.Description;
        Status = todo.Status;
        EstimatedHours = todo.EstimatedHours;
        RemainingHours = todo.RemainingHours;

        NavigationManager.NavigateTo($"/todos/{todo.Id}", replace: true);
    }

    async Task FetchTodo()
    {
        await LoadTodo(todo!.Id);
    }

    async Task LoadTodo(int id)
    {
        try
        {
            this.todo = await TodosClient.GetTodoByIdAsync(id);

            Title = todo.Title;
            Description = todo.Description;
            Status = todo.Status;
            EstimatedHours = todo.EstimatedHours;
            RemainingHours = todo.RemainingHours;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    void OnTitleUpdated(int todoId, string title)
    {
        Title = title;
        StateHasChanged();
    }

    void OnDescriptionUpdated(int todoId, string? description)
    {
        Description = description;
        StateHasChanged();
    }

    void OnStatusUpdated(int todoId, TodoStatusDto status)
    {
        Status = status;
        StateHasChanged();
    }

    void OnEstimatedHoursUpdated(int todoId, double? hours)
    {
        EstimatedHours = hours;
        StateHasChanged();
    }

    void OnRemainingHoursUpdated(int todoId, double? hours)
    {
        RemainingHours = hours;
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}