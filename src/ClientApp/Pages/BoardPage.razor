@page "/board"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@inject ITodosClient TodosClient
@inject ISnackbar Snackbar
@inject Services.IAccessTokenProvider AccessTokenProvider

<PageTitle>Board</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">Board</MudText>

@if (loaded)
{
    <MudDropContainer @ref="dropContainer" T="TodoDto" Items="todos" Context="context" ItemsSelector="@((item, dropzone) => item.Status == Enum.Parse<TodoStatusDto>(dropzone))" ItemDropped="ItemUpdated">
        <ChildContent>
            <div class="d-flex flex-wrap flex-grow-1">
                @foreach (var status in Enum.GetValues<TodoStatusDto>())
                {
                    <MudPaper Elevation="0" Class="ma-4 flex-1 mud-background-gray rounded-lg">
                        <MudList Clickable="true" Class="d-flex flex-column mud-height-full">
                            <MudListSubheader>
                                <MudToolBar DisableGutters="true" Dense="true">
                                    <MudText Typo="Typo.h6"><b>@status</b></MudText>
                                    <MudSpacer />
                                    @*
                                        <MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
                                            <MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Outlined.Delete" OnClick="@( () => { })">Delete Section</MudButton>
                                            <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Rounded.Edit">Rename Section</MudButton>
                                        </MudMenu>
                                    *@
                                </MudToolBar>
                            </MudListSubheader>
                            <MudDropZone T="TodoDto" Identifier="@($"{status}")" Class="d-flex flex-grow-1 flex-wrap gap-1" AllowReorder="false" />
                        </MudList>
                        @*
                            <MudButton OnClick="@(() => {})" Color="Color.Inherit" StartIcon="@Icons.Filled.Add" FullWidth="true" Class="py-2" Style="background-color: inherit;">Add Task</MudButton>
                        *@
                    </MudPaper>
                }
            </div>
        </ChildContent>
        <ItemRenderer>
            <MudCard Class="ma-4 rounded-lg" Elevation="25">
                <MudCardContent>
                    <div class="d-flex">
                        <MudIcon Icon="@Icons.Material.Filled.Task" class="mr-3"></MudIcon>
                        <MudText>@context.Id - @context.Title</MudText>
                    </div>

                    <MudText Typo="Typo.body1" Class="mt-2">@context.Description</MudText>
                    @if(context.EstimatedHours is not null) 
                    {
                        <MudText Typo="Typo.caption" Class="mt-2">Estimated: @context.EstimatedHours hours</MudText> <br />
                    }
                    @if(context.RemainingHours is not null) 
                    {
                        <MudText Typo="Typo.caption" Class="mt-2">Remaining: @context.RemainingHours hours</MudText>
                    }
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" Href="@($"/todos/{context.Id}")">More</MudButton>
                </MudCardActions>
            </MudCard>
        </ItemRenderer>
    </MudDropContainer>}

@code {
    MudDropContainer<TodoDto> dropContainer = null!;
    HubConnection hubConnection = null!;
    List<TodoDto> todos = new List<TodoDto>();
    bool loaded = false;

    protected override async Task OnInitializedAsync()
    {
        todos.AddRange((await TodosClient.GetTodosAsync(null, 1, 100, null, null)).Items);
        loaded = true;

        try
        {
            hubConnection = new HubConnectionBuilder()
            .WithUrl($"https://localhost:5001/hubs/todos", options =>
                {
                    options.AccessTokenProvider = async () => await AccessTokenProvider.GetAccessTokenAsync();
                })
            .WithAutomaticReconnect().Build();

            hubConnection.On<int>("Created", OnCreated);
            //hubConnection.On<int>("Updated", OnUpdated);
            hubConnection.On<int>("Deleted", OnDeleted);

            hubConnection.On<int, string>("TitleUpdated", OnTitleUpdated);
            hubConnection.On<int, string?>("DescriptionUpdated", OnDescriptionUpdated);
            hubConnection.On<int, TodoStatusDto>("StatusUpdated", OnStatusUpdated);
            hubConnection.On<int, double?>("EstimatedHoursUpdated", OnEstimatedHoursUpdated);
            hubConnection.On<int, double?>("RemainingHoursUpdated", OnRemainingHoursUpdated);

            hubConnection.Closed += (error) =>
            {
                if (error is not null)
                {
                    Snackbar.Add($"{error.Message}", Severity.Error);
                }

                return Task.CompletedTask;
            };
            hubConnection.Reconnected += (error) =>
            {
                Snackbar.Add("Reconnected");
                return Task.CompletedTask;
            };
            hubConnection.Reconnecting += (error) =>
            {
                Snackbar.Add("Reconnecting");
                return Task.CompletedTask;
            };
            await hubConnection.StartAsync();
        }
        catch (Exception exc)
        {
            Snackbar.Add(exc.Message.ToString(), Severity.Error);
        }
    }

    private async void ItemUpdated(MudItemDropInfo<TodoDto> dropItem)
    {
        var newStatus = Enum.Parse<TodoStatusDto>(dropItem.DropzoneIdentifier);

        var oldStatus = dropItem.Item.Status;
        dropItem.Item.Status = newStatus;

        try
        {
            await TodosClient.UpdateStatusAsync(dropItem.Item.Id, newStatus);
        }
        catch (ApiException<ProblemDetails> exc)
        {
            dropItem.Item.Status = oldStatus;

            Snackbar.Add(exc.Result.Title, Severity.Error);
        }
        catch (Exception exc)
        {
            Snackbar.Add(exc.Message, Severity.Error);
        }
    }

    async Task OnCreated(int todoId)
    {
        var item = await TodosClient.GetTodoByIdAsync(todoId);
        todos.Add(item);
        dropContainer.Refresh();
        StateHasChanged();
    }

    /*
        async Task OnUpdated(int todoId)
        {

        }
    */

    void OnDeleted(int todoId)
    {
        var item = todos.First(x => x.Id == todoId);
        todos.Remove(item);
        dropContainer.Refresh();
        StateHasChanged();
    }

    void OnTitleUpdated(int todoId, string title)
    {
        var item = todos.First(x => x.Id == todoId);
        item.Title = title;
        dropContainer.Refresh();
        StateHasChanged();
    }

    void OnDescriptionUpdated(int todoId, string? description)
    {
        var item = todos.First(x => x.Id == todoId);
        item.Description = description;
        dropContainer.Refresh();
        StateHasChanged();
    }

    void OnStatusUpdated(int todoId, TodoStatusDto status)
    {
        var item = todos.First(x => x.Id == todoId);
        item.Status = status;
        dropContainer.Refresh();
        StateHasChanged();
    }

    void OnEstimatedHoursUpdated(int todoId, double? hours)
    {
        var item = todos.First(x => x.Id == todoId);
        item.EstimatedHours = hours;
        dropContainer.Refresh();
        StateHasChanged();
    }

    void OnRemainingHoursUpdated(int todoId, double? hours)
    {
        var item = todos.First(x => x.Id == todoId);
        item.RemainingHours = hours;
        dropContainer.Refresh();
        StateHasChanged();
    }
}