@page "/"
@page "/todos"
@page "/todos/new"
@page "/todos/{id:int}"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using TodoApp
@implements IAsyncDisposable
@inject ISnackbar Snackbar
@inject ITodosClient TodosClient
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject Services.IAccessTokenProvider AccessTokenProvider
@inject IStringLocalizer<TodosPage> T

<PageTitle>@T["Todos"]</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">@T["Todos"]</MudText>

<MudTable T="TodoDto" MultiSelection="@selectMultiple" @bind-SelectedItems="selectedItems" ServerData="@(new Func<TableState, Task<TableData<TodoDto>>>(ServerReload))" Elevation="25"
          OnRowClick="async (e) => await ShowTodo(e.Item.Id)" Dense="false" Hover="true" @ref="table" SortLabel="@T["SortBy"]" Class="mb-8">
    <ToolBarContent>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="async () => CreateTodo()">@T["CreateTodo"]</MudButton>

        <MudCheckBox Label="@T["SelectMultiple"]" Checked="selectMultiple" CheckedChanged="new Func<bool, Task>(OnSelectMultipleChanged)" />

        @if (selectedItems.Count > 0)
        {
            <MudButton @onclick="DeleteSelectedItems" Variant="Variant.Filled" StartIcon="@Icons.Filled.Delete" Color="Color.Default" Class="ms-4 me-2">
                @T["DeleteSelectedTodos"]
            </MudButton>
        }
    </ToolBarContent>

    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortLabel="Id" T="TodoDto">@T["Id"]</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Title" T="TodoDto">@T["Title"]</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Status" T="TodoDto">@T["Status"]</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="EstimatedHours" T="TodoDto">@T["EstimatedHours"]</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="RemainingHours" T="TodoDto">@T["RemainingHours"]</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Created" T="TodoDto">@T["Created"]</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="LastModified" T="TodoDto">@T["LastModified"]</MudTableSortLabel>
        </MudTh>
        <MudTh>

        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="@T["Id"]">@context.Id</MudTd>
        <MudTd DataLabel="@T["Title"]">@context.Title</MudTd>
        <MudTd DataLabel="@T["Status"]">@T[context.Status.ToString()]</MudTd>
        <MudTd DataLabel="@T["EstimatedHours"]">@context.EstimatedHours.ToString()</MudTd>
        <MudTd DataLabel="@T["RemainingHours"]">@context.RemainingHours.ToString()</MudTd>
        <MudTd DataLabel="@T["Created"]">@context.Created.ToString("g")</MudTd>
        <MudTd DataLabel="@T["LastModified"]">@context.LastModified?.ToString("g")</MudTd>
        <MudTh>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="async () => await DeleteTodo(context)" Disabled="selectMultiple"></MudIconButton>
        </MudTh>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>@T["NoMatchesFound"]</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>@T["Loading"]</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager RowsPerPageString="@T["RowsPerPage"]" />
    </PagerContent>
</MudTable>

@code {
    HubConnection hubConnection = null!;
    MudTable<TodoDto> table = null!;
    bool selectMultiple;
    private HashSet<TodoDto> selectedItems = new HashSet<TodoDto>();

    [Parameter] public int? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            hubConnection = new HubConnectionBuilder()
            .WithUrl($"https://localhost:5001/hubs/todos", options =>
            {
                options.AccessTokenProvider = async () => await AccessTokenProvider.GetAccessTokenAsync();
            })
            .WithAutomaticReconnect().Build();

            hubConnection.On<int>("Created", OnCreated);
            hubConnection.On<int>("Updated", OnUpdated);
            hubConnection.On<int>("Deleted", OnDeleted);

            //hubConnection.On<string, string>("TitleUpdated", OnTitleUpdated);
            //hubConnection.On<string, string?>("DescriptionUpdated", OnDescriptionUpdated);
            //hubConnection.On<string, TodoStatusDto>("StatusUpdated", OnStatusUpdated);

            hubConnection.Closed += (error) =>
            {
                if (error is not null)
                {
                    Snackbar.Add($"{error.Message}", Severity.Error);
                }

                return Task.CompletedTask;
            };
            hubConnection.Reconnected += (error) =>
            {
                Snackbar.Add("Reconnected");
                return Task.CompletedTask;
            };
            hubConnection.Reconnecting += (error) =>
            {
                Snackbar.Add("Reconnecting");
                return Task.CompletedTask;
            };
            await hubConnection.StartAsync();
        }
        catch (Exception exc)
        {
            Snackbar.Add(exc.Message.ToString(), Severity.Error);
        }

        if (Id is not null)
        {
            await ShowTodo(Id.GetValueOrDefault());
        }
        else
        {
            if (NavigationManager.Uri.EndsWith("/todos/new"))
            {
                await CreateTodo();
            }
        }
    }

    async Task CreateTodo()
    {
        var uri = NavigationManager.Uri;

        DialogOptions dialogOptions = new DialogOptions() { FullScreen = false, MaxWidth = MaxWidth.Large, CloseButton = true };
        var dialogRef = DialogService.Show<TodoDialog>(string.Empty, dialogOptions);
        var result = await dialogRef.Result;

        NavigationManager.NavigateTo(uri, replace: true);
    }

    async Task ShowTodo(int id)
    {
        if (selectMultiple)
            return;

        DialogParameters dialogParameters = new();
        dialogParameters.Add(nameof(TodoDialog.Id), id);

        DialogOptions dialogOptions = new DialogOptions() { FullScreen = false, MaxWidth = MaxWidth.Large, CloseButton = true };
        var dialogRef = DialogService.Show<TodoDialog>(string.Empty, dialogParameters, dialogOptions);
        var result = await dialogRef.Result;
    }

    Task OnSelectMultipleChanged(bool value)
    {
        selectMultiple = value;
        selectedItems.Clear();

        return Task.CompletedTask;
    }

    private async Task<TableData<TodoDto>> ServerReload(TableState state)
    {
        try
        {
            var result = await TodosClient.GetTodosAsync(null, state.Page + 1, state.PageSize, state.SortLabel, state.SortDirection
                == MudBlazor.SortDirection.Ascending ? null : (state.SortDirection == MudBlazor.SortDirection.Ascending ?
                TodoApp.SortDirection.Ascending : TodoApp.SortDirection.Descending));

            return new TableData<TodoDto>() { TotalItems = result.TotalItems, Items = result.Items };
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();

            return null!;
        }
    }

    async Task<TodoDto> FetchTodo(int id)
    {
        return await TodosClient.GetTodoByIdAsync(id);
    }

    private async Task DeleteTodo(TodoDto item)
    {
        try
        {
            var result = await DialogService.ShowMessageBox(T["DeleteTodo", item.Title], T["AreYouSure"], T["Yes"], T["No"]);

            if (result.GetValueOrDefault())
            {
                await DeleteTodoCore(item);

                await table.ReloadServerData();
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception)
        {
            Snackbar.Add(T["FailedToDeleteTodo"], Severity.Error);
        }
    }

    private async Task DeleteTodoCore(TodoDto item)
    {
        await TodosClient.DeleteTodoAsync(item.Id);

        selectedItems.Remove(item);
    }

    private async Task DeleteSelectedItems()
    {
        try
        {
            var result = await DialogService.ShowMessageBox(T["DeleteSelectedTodos"], T["AreYouSure"], T["Yes"], T["No"]);

            if (result.GetValueOrDefault())
            {
                List<TodoDto>? failedItems = null;

                foreach (var item in selectedItems)
                {
                    try
                    {
                        await DeleteTodoCore(item);

                        selectedItems.Remove(item);
                    }
                    catch (AccessTokenNotAvailableException exception)
                    {
                        exception.Redirect();
                    }
                    catch (Exception)
                    {
                        if (failedItems is null)
                        {
                            failedItems = new List<TodoDto>();
                        }

                        failedItems.Add(item);
                    }
                }

                if (failedItems?.Any() ?? false)
                {
                    Snackbar.Add(T["FailedToDeleteTodos", failedItems!.Count()], Severity.Error);
                }

                selectMultiple = false;

                await table.ReloadServerData();

                StateHasChanged();
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    async Task OnCreated(int todoId)
    {
        await table.ReloadServerData();

        Snackbar.Add(T["TodoCreated", todoId], Severity.Normal);
    }

    async Task OnUpdated(int todoId)
    {
        bool hasUpdated = await UpdateItem(todoId);

        Snackbar.Add(T["TodoUpdated", todoId], Severity.Normal);
    }

    async Task OnDeleted(int todoId)
    {
        await table.ReloadServerData();

        Snackbar.Add(T["TodoDeleted", todoId], Severity.Normal);
    }

    /* void OnTitleUpdated(int todoId, string title)
    {
        var item = GetTodoFromTable(todoId);

        if(item is not null)
        {
            item.Title = Title;

            StateHasChanged();
        }
    } */

    private async Task<bool> UpdateItem(int id)
    {
        var newItem = await FetchTodo(id);
        var hasReplaced = ReplaceItemInTable(id, newItem);

        StateHasChanged();

        return hasReplaced;
    }

    private bool ReplaceItemInTable(int id, TodoDto item)
    {
        var data = GetTableData();
        var items = data!.Items.ToList();
        var existingItem = items.FirstOrDefault(x => x.Id == id);
        if (existingItem is not null)
        {
            var index = items.TakeWhile(x => x.Id != id).Count();
            items[index] = item;
            data!.Items = items;

            return true;
        }
        return false;
    }

    private TodoDto? GetItemFromTable(int id)
    {
        var data = GetTableData();
        return data!.Items.FirstOrDefault(x => x.Id == id);
    }

    private TableData<TodoDto>? GetTableData()
    {
        return (TableData<TodoDto>?)table?.GetType()?
        .GetField("_server_data", System.Reflection.BindingFlags.NonPublic |
        System.Reflection.BindingFlags.Instance)?
        .GetValue(table);
    }
    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}
