@using System.Linq.Expressions
@inject IUsersClient UsersClient

<MudAutocomplete T="UserDto" Label="@Label" Dense="true" Variant="Variant" Style="@Style" Class="@Class" Value="Value" ValueChanged="ValueChanged"
                 For="For" SearchFunc="SearchUsers" ToStringFunc="(x) => x.Name"
                 ResetValueOnEmptyText="true" CoerceText="false" CoerceValue="false">
    <ItemTemplate Context="context2">
        <MudText Typo="Typo.body1">@context2.Name</MudText>
    </ItemTemplate>

    <ItemSelectedTemplate Context="context2">
        <MudText Typo="Typo.body1">@context2.Name</MudText>
    </ItemSelectedTemplate>
</MudAutocomplete>

@code {
    [Parameter]
    public string Label { get; set; } = "User";

    [Parameter]
    public UserDto Value { get; set; } = null!;

    [Parameter]
    public EventCallback<UserDto> ValueChanged { get; set; }

    [Parameter]
    public Expression<Func<UserDto>> For { get; set; } = null!;

    [Parameter]
    public string Style { get; set; } = null!;

    [Parameter]
    public string Class { get; set; } = null!;

    [Parameter]
    public Variant Variant { get; set; }

    async Task<IEnumerable<UserDto>> SearchUsers(string text)
    {
        try
        {
            var results = await UsersClient.GetUsersAsync(1, 10, text, null, null);
            return results.Items;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        return null!;
    }
}